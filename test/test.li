(import (li timer))
(define timer (make-timer))

(import (li base))

(let ((x 28))
  (assert = x 28))
(assert equal? (quote a) 'a)
(assert equal? (quote [a b c]) [a b c])
(assert equal? (quote (+ 1 2)) '(+ 1 2))
(assert equal? 'a 'a)
(assert equal? '[a b c] [a b c])
(assert equal? '() ())
(assert equal? '(+ 1 2) (quote (+ 1 2)))
(assert equal? '(quote a) '(quote a))
(assert equal? ''a '(quote a))
(assert equal? '"abc" "abc")
(assert equal? "abc" "abc")
(assert = '145932 145932)
(assert = 145932 145932)
(assert eq? '#t #t)
(assert eq? #t #t)
(assert = (+ 3 4) 7)
(assert = ((if #f + *) 3 4) 12)
;(assert equal? (lambda (x) (+ x x)) a procedure)
(assert = ((lambda (x) (+ x x)) 4) 8)
(let ((reverse-subtract (lambda (x y) (- y x))))
  (assert = (reverse-subtract 7 10) 3))
(let ()
  (define add4
    (let ((x 4))
      (lambda (y) (+ x y))))
  (assert = (add4 6) 10))
(assert equal? ((lambda x x) 3 4 5 6) '(3 4 5 6))
(assert equal? ((lambda (x y . z) z)
                3 4 5 6)
        '(5 6))
(assert eq? (if (> 3 2) 'yes 'no) 'yes)
(assert eq? (if (> 2 3) 'yes 'no) 'no)
(assert = (if (> 3 2)
            (- 3 2)
            (+ 3 2))
        1)
(let ((x 2))
  (assert = (+ x 1) 3)
  (assert = (begin (set! x 4) x) 4)
  (assert = (+ x 1) 5))
(assert eq? (cond ((> 3 2) 'greater)
                  ((< 3 2) 'less)) 'greater)
(assert eq? (cond ((> 3 3) 'greater)
                  ((< 3 3) 'less)
                  (else 'equal)) 'equal)
(assert = (cond ((assv 'b '((a 1) (b 2)))
                 => cadr)
                (else #f)) 2)
(assert eq? (case (* 2 3)
                 ((2 3 5 7) 'prime)
                 ((1 4 6 8 9) 'composite))
        'composite)
(assert eq? (case (car '(c d))
                 ((a) 'a)
                 ((b) 'b))
        #f)
(assert eq? (case (car '(c d))
                 ((a e i o u) 'vowel)
                 ((w y) 'semivowel)
                 (else 'consonant))
        'consonant)
(assert eq? (and (= 2 2) (> 2 1)) #t)
(assert eq? (and (= 2 2) (< 2 1)) #f)
(assert equal? (and 1 2 'c '(f g)) '(f g))
(assert eq? (and) #t)
(assert eq? (or (= 2 2) (> 2 1)) #t)
(assert eq? (or (= 2 2) (< 2 1)) #t)
(assert equal? (or #f #f #f) #f)
(assert equal? (or (memq 'b '(a b c))
                   (/ 3 0))
        '(b c))
(assert equal? (let ((x 2) (y 3))
                 (* x y)) 6)
(assert equal? (let ((x 2) (y 3))
                 (let ((x 7)
                       (z (+ x y)))
                   (* z x))) 35)
(assert equal? (let ((x 2) (y 3))
                 (let* ((x 7)
                        (z (+ x y)))
                   (* z x))) 70)
(assert equal? (letrec ((even?
                          (lambda (n)
                            (if (zero? n)
                              #t
                              (odd? (- n 1)))))
                        (odd?
                          (lambda (n)
                            (if (zero? n)
                              #f
                              (even? (- n 1))))))
                 (even? 88)) #t)
(let ((x 0))
  (assert equal? (begin (set! x 5) (+ x 1)) 6))
(assert equal? (do ((vec (make-vector 5))
                    (i 0 (+ i 1)))
                 ((= i 5) vec)
                 (set vec i i))
        [0 1 2 3 4])
(assert equal? (let ((x '(1 3 5 7 9)))
                 (do ((x x (cdr x))
                      (sum 0 (+ sum (car x))))
                   ((null? x) sum)))
        25)
(assert equal? (let loop ((numbers '(3 -2 1 6 -5))
                          (nonneg '())
                          (neg '()))
                 (cond ((null? numbers) (list nonneg neg))
                       ((>= (car numbers) 0)
                        (loop (cdr numbers)
                              (cons (car numbers) nonneg)
                              neg))
                       ((< (car numbers) 0)
                        (loop (cdr numbers)
                              nonneg
                              (cons (car numbers) neg)))))
        '((6 1 3) (-5 -2)))
(assert equal? `(list ,(+ 1 2) 4) '(list 3 4))
(assert equal? (let ((name 'a)) `(list ,name ',name)) '(list a (quote a)))
(assert equal? `(a ,(+ 1 2) ,@(map abs '(4 -5 6)) b) '(a 3 4 5 6 b))
(assert equal? `(( foo ,(- 10 3)) ,@(cdr '(c)) . ,(car '(cons))) '((foo 7) . cons))
;(assert equal? `[10 5 ,(sqrt 4) ,@(map sqrt '(16 9)) 8] [10 5 2 4 3 8])
;(assert equal? `(a `(b ,(+ 1 2) ,(foo ,(+ 1 3) d) e) f) '(a `(b ,(+ 1 2) ,(foo 4 d) e) f))
;(assert equal? (let ((name1 'x)
;                      (name2 'y))
;                  `(a `(b ,,name1 ,',name2 d) e)) '(a `(b ,x ,'y d) e))
(assert equal? (quasiquote (list (unquote (+ 1 2)) 4)) '(list 3 4))
(assert equal? '(quasiquote (list (unquote (+ 1 2)) 4)) '`(list ,(+ 1 2) 4))
;(assert equal? (quasiquote (list (unquote (+ 1 2)) 4))
;                (let-syntax ((when (syntax-rules ()
;                                                 ((when test stmt1 stmt2 ...)
;                                                  (if test
;                                                    (begin stmt1
;                                                           stmt2 ...))))))
;                  (let ((if #t))
;                    (when if (set! if 'now))
;                    if)) 'now)
;(assert equal? (let ((x 'outer))
;                  (let-syntax ((m (syntax-rules () ((m) x))))
;                    (let ((x 'inner))
;                      (m)))) outer)
;(assert equal? (letrec-syntax
;                  ((my-or (syntax-rules ()
;                                        ((my-or) #f)
;                                        ((my-or e) e)
;                                        ((my-or e1 e2 ...)
;                                         (let ((temp e1))
;                                           (if temp
;                                             temp
;                                             (my-or e2 ...)))))))
;                  (let ((x #f)
;                        (y 7)
;                        (temp 8)
;                        (let odd?)
;                        (if even?))
;                    (my-or x
;                           (let temp)
;                           (if y)
;                           y))) 7)
;(assert equal? (let ((=> #f))
;                  (cond (#t => 'ok))) ok)
;(assert equal? (= (symbol->string obj1)
;                          (symbol->string obj2)) #t)
;(assert equal? (= (symbol->string obj1)
;                          (symbol->string obj2)) #f)
(assert eq? (eqv? 'a 'a) #t)
(assert eq? (eqv? 'a 'b) #f)
(assert eq? (eqv? 2 2) #t)
(assert eq? (eqv? '() '()) #t)
(assert eq? (eqv? 100000000 100000000) #t)
(assert eq? (eqv? (cons 1 2) (cons 1 2)) #f)
(assert eq? (eqv? (lambda () 1)
                  (lambda () 2))
        #f)
(assert eq? (eqv? #f 'nil) #f)
(assert eq? (let ((p (lambda (x) x)))
              (eqv? p p))
        #t)
(assert eq? (eqv? "" "") #t) ; #f in scheme
(assert eq? (eqv? '[] '[]) #f)
(assert eq? (eqv? (lambda (x) x)
                  (lambda (x) x)) #f)
(assert eq? (eqv? (lambda (x) x)
                  (lambda (y) y)) #f)
(let ((gen-counter (lambda ()
                     (let ((n 0))
                       (lambda () (set! n (+ n 1)) n)))))
  (assert eq? (let ((g (gen-counter)))
                (eqv? g g)) #t)
  (assert eq? (eqv? (gen-counter) (gen-counter)) #f))
(let ()
  (define gen-loser
    (lambda ()
      (let ((n 0))
        (lambda () (set! n (+ n 1)) 27))))
  (assert eq?
          (let ((g (gen-loser)))
            (eqv? g g))
          #t)
  (assert eq? (eqv? (gen-loser) (gen-loser)) #f))
(assert eq? (letrec ((f (lambda () (if (eqv? f g) 'both 'f)))
                     (g (lambda () (if (eqv? f g) 'both 'g))))
              (eqv? f g)) #f)
(assert eq? (letrec ((f (lambda () (if (eqv? f g) 'f 'both)))
                     (g (lambda () (if (eqv? f g) 'g 'both))))
              (eqv? f g)) #f)
(assert eq? (eqv? '(a) '(a)) #f)
(assert eq? (eqv? "a" "a") #t) ; #f in scheme
(assert eq? (eqv? '(b) (cdr '(a b))) #f)
(assert eq? (let ((x '(a)))
              (eqv? x x)) #t)
(assert eq? (eq? 'a 'a) #t)
(assert eq? (eq? '(a) '(a)) #f)
(assert eq? (eq? (list 'a) (list 'a)) #f)
(assert eq? (eq? "a" "a") #f)
(assert eq? (eq? "" "") #f)
(assert eq? (eq? '() '()) #t)
(assert eq? (eq? 2 2) #f)
(assert eq? (eq? #\A #\A) #f)
(assert eq? (eq? car car) #t)
(assert eq? (let ((n (+ 2 3)))
              (eq? n n)) #t)
(assert eq? (let ((x '(a)))
              (eq? x x)) #t)
(assert eq? (let ((x '[]))
              (eq? x x)) #t)
(assert eq? (let ((p (lambda (x) x)))
              (eq? p p)) #t)
(assert eq? (equal? 'a 'a) #t)
(assert eq? (equal? '(a) '(a)) #t)
(assert eq? (equal? '(a (b) c)
                    '(a (b) c)) #t)
(assert eq? (equal? "abc" "abc") #t)
(assert eq? (equal? 2 2) #t)
(assert eq? (equal? (make-vector 5 'a)
                    (make-vector 5 'a)) #t)
(assert eq? (equal? (lambda (x) x)
                    (lambda (y) y)) #f)
;(assert eq? (complex? 3+4i) #t)
(assert complex? 3)
(assert real? 3)
;(assert real? -2.5+0.0i)
;(assert real? #e1e10)
(assert rational? (/ 6 10)) ; TODO: replace with below
;(assert rational? 6/10)
(assert rational? (/ 6 3)) ; TODO: replace with below
;(assert rational? 6/3)
;(assert integer? 3+0i)
(assert integer? 3.0)
(assert integer? (/ 8 4)) ; TODO: replace with below
;(assert integer? 8/4)
(assert = (max 3 4) 4) ; exact
(assert exact? (max 3 4)) ; exact
(assert = (max 3.9 4) 4.0) ; inexact
(assert inexact? (max 3.9 4))
(assert = (+ 3 4) 7)
(assert = (+ 3) 3)
(assert = (+) 0)
(assert = (* 4) 4)
(assert = (*) 1)
(assert = (- 3 4) -1)
(assert = (- 3 4 5) -6)
(assert = (- 3) -3)
;(assert = (/ 3 4 5) 3/20)
;(assert = (/ 3) 1/3)
(assert = (abs -7) 7)
(let ()
  (define n1 0)
  (define n2 1)
  ;(assert = (quotient n1 n2) n1/n2)
  (assert = (remainder n1 n2) 0)
  (assert = (modulo n1 n2) 0)
  ;(assert = (quotient n1 n2) nq)
  ;(assert = (remainder n1 n2) nr)
  ;(assert = (modulo n1 n2) nm)
  (assert eq? (= n1 (+ (* n2 (quotient n1 n2))
                       (remainder n1 n2)))
          #t))
(assert = (modulo 13 4) 1)
(assert = (remainder 13 4) 1)
(assert = (modulo -13 4) 3)
(assert = (remainder -13 4) -1)
(assert = (modulo 13 -4) -3)
(assert = (remainder 13 -4) 1)
(assert = (modulo -13 -4) -1)
(assert = (remainder -13 -4) -1)
(assert = (remainder -13 -4.0) -1.0) ; inexact
(assert = (gcd 32 -36) 4)
(assert = (gcd) 0)
(assert = (lcm 32 -36) 288)
(assert = (lcm 32.0 -36) 288.0) ; inexact
(assert = (lcm) 1)
(assert = (numerator (/ 6 4)) 3)
(assert = (denominator (/ 6 4)) 2)
; (assert = (denominator
;             (inexact (/ 6 4))) 2.0)
(assert = (floor -4.3) -5.0)
(assert = (ceiling -4.3) -4.0)
(assert = (truncate -4.3) -4.0)
(assert = (round -4.3) -4.0)
(assert = (floor 3.5) 3.0)
(assert = (ceiling 3.5) 4.0)
(assert = (truncate 3.5) 3.0)
(assert = (round 3.5) 4.0) ; inexact
(assert = (round 7/2) 4) ; exact
(assert = (round 7) 7)
;(assert (equal? (rationalize
;                  (exact .3) 1/10) 1/3)) ; exact
;(assert (equal? (rationalize .3 1/10) #i1/3)) ; inexact
(assert = (square 42) 1764)
(assert = (square 2.0) 4.0)
;(assert (equal? (make-rectangular x1 x2) z))
;(assert (equal? (make-polar x3 x4) z))
;(assert (equal? (real-part z) x1))
;(assert (equal? (imag-part z) x2))
;(assert (equal? (magnitude z) |x3|))
;(assert (equal? (angle z) xangle))
(assert = (string->number "100") 100)
;(assert (equal? (string->number "100" 16) 256))
(assert = (string->number "1e2") 100.0)
;(assert (equal? (string->number "15;;") 1500.0))
(assert eq? #t #t)
(assert eq? #f #f)
(assert eq? '#f #f)
(assert eq? (not #t) #f)
(assert eq? (not 3) #f)
(assert eq? (not (list 3)) #f)
(assert eq? (not #f) #t)
(assert eq? (not '()) #f)
(assert eq? (not (list)) #f)
(assert eq? (not 'nil) #f)
(assert eq? (boolean? #f) #t)
(assert eq? (boolean? 0) #f)
(assert eq? (boolean? '()) #f)
(let ()
  (define x (list 'a 'b 'c))
  (define y x)
  (assert equal? y '(a b c))
  (assert eq? (list? y) #t)
  (assert eq? (set-cdr! x 4) null)
  (assert equal? x '(a . 4))
  (assert eq? (eqv? x y) #t)
  (assert equal? y '(a . 4))
  (assert eq? (list? y) #f)
  ;(assert (equal? (set-cdr! x x) null)) ; TODO: fix inf loop
  (assert eq? (list? x) #f))
(assert eq? (pair? '(a . b)) #t)
(assert eq? (pair? '(a b c)) #t)
(assert eq? (pair? '()) #f)
(assert eq? (pair? '[a b]) #f)
(assert equal? (cons 'a '()) '(a))
(assert equal? (cons '(a) '(b c d)) '((a) b c d))
(assert equal? (cons "a" '(b c)) '("a" b c))
(assert equal? (cons 'a 3) '(a . 3))
(assert equal? (cons '(a b) 'c) '((a b) . c))
(assert equal? (car '(a b c)) 'a)
(assert equal? (car '((a) b c d)) '(a))
(assert = (car '(1 . 2)) 1)
;(assert (equal? (car '()) error))
(assert equal? (cdr '((a) b c d)) '(b c d))
(assert = (cdr '(1 . 2)) 2)
;(assert (equal? (cdr '()) error))
(let ()
  (define (f) (list 'not-a-constant-list))
  (define (g) '(constant-list))
  (assert (equal? (set-car! (f) 3) null))
  ;(assert (equal? (set-car! (g) 3) error))
  )
(assert eq? (list? '(a b c)) #t)
(assert eq? (list? '()) #t)
(assert eq? (list? '(a . b)) #f)
;(assert (equal? (let ((x (list 'a)))
;                  (set-cdr! x x)
;                  (list? x)) #f))
(assert equal? (list 'a (+ 3 4) 'c) '(a 7 c))
(assert equal? (list) ())
(assert = (length '(a b c)) 3)
(assert = (length '(a (b) (c d e))) 3)
(assert = (length '()) 0)
(assert equal? (append '(x) '(y)) '(x y))
(assert equal? (append '(a) '(b c d)) '(a b c d))
(assert equal? (append '(a (b)) '((c))) '(a (b) (c)))
(assert equal? (append '(a b) '(c . d)) '(a b c . d))
(assert equal? (append '() 'a) 'a)
(assert equal? (reverse '(a b c)) '(c b a))
(assert equal? (reverse '(a (b c) d (e (f)))) '((e (f)) d (b c) a))
(assert equal? (ref '(a b c d) 2) 'c)
;(assert (equal? (ref '(a b c d)
;                          (exact (round 1.8))) 'c))
(assert equal? (memq 'a '(a b c)) '(a b c))
(assert equal? (memq 'b '(a b c)) '(b c))
(assert eq? (memq 'a '(b c d)) #f)
(assert eq? (memq (list 'a) '(b (a) c)) #f)
(assert equal? (member (list 'a)
                       '(b (a) c))
        '((a) c))
(assert eq? (memq 101 '(100 101 102)) #f)
(assert equal? (memv 101 '(100 101 102)) '(101 102))
(define e '((a 1) (b 2) (c 3)))
(assert equal? (assq 'a e) '(a 1))
(assert equal? (assq 'b e) '(b 2))
(assert eq? (assq 'd e) #f)
(assert eq? (assq (list 'a) '(((a)) ((b)) ((c)))) #f)
(assert equal? (assoc (list 'a) '(((a)) ((b)) ((c)))) '((a)))
(assert eq? (assq 5 '((2 3) (5 7) (11 13))) #f)
(assert equal? (assv 5 '((2 3) (5 7) (11 13))) '(5 7))
(assert eq? (symbol? 'foo) #t)
(assert eq? (symbol? (car '(a b))) #t)
(assert eq? (symbol? "bar") #f)
(assert eq? (symbol? 'nil) #t)
(assert eq? (symbol? '()) #f)
;(assert (equal? (symbol? #f) #f))
(assert equal? (symbol->string 'flying-fish) "flying-fish")
(assert not (equal? (symbol->string 'Martin) "martin"))
(assert equal? (symbol->string
                 (string->symbol "Malvina")) "Malvina")
(assert equal? (eq? 'mISSISSIppi 'mississippi) #f)
(assert equal? (string->symbol "mISSISSIppi") 'mISSISSIppi)
(assert equal? (eq? 'bitBlt (string->symbol "bitBlt")) #t)
(assert equal? (eq? 'JollyWog
                    (string->symbol
                      (symbol->string 'JollyWog))) #t)
(assert equal? (= "K. Harper, M.D."
                  (symbol->string
                    (string->symbol "K. Harper, M.D."))) #t)
;(assert equal? (char<=? a b) #t)
;(assert equal? (<= x y) #t)
;(assert equal? (<= (char->integer a)
;                    (char->integer b)) #t)
;(assert equal? (char<=? (integer->char x)
;                         (integer->char y)) #t)
;(define (f) (make-string 3 #\*)) ; TODO: fix make-string
;(define (g) "***")
;(assert equal?
;          (string-set! (f) 0 #\?) unspecified)
;(assert equal? (string-set! (g) 0 #\?) error)
;(assert equal? (string-set! (symbol->string 'immutable)
;                             0
;                             #\?) error)
(assert equal? (procedure? car) #t)
(assert equal? (procedure? 'car) #f)
(assert equal? (procedure? (lambda (x) (* x x))) #t)
(assert equal? (procedure? '(lambda (x) (* x x))) #f)
;(assert equal? (call-with-current-continuation procedure?) #t)
(assert equal? (apply + (list 3 4)) 7)
(let ()
  (define compose
    (lambda (f g)
      (lambda args
        (f (apply g args)))))
  (assert equal? ((compose sqrt *) 12 75) 30))
(assert equal? (map cadr '((a b) (d e) (g h))) '(b e h))
(assert equal? (map (lambda (n) (expt n n))
                    '(1 2 3 4 5)) '(1 4 27 256 3125))
(assert equal? (map + '(1 2 3) '(4 5 6)) '(5 7 9))
(assert equal? (let ((count 0))
                 (map (lambda (ignored)
                        (set! count (+ count 1))
                        count)
                      '(a b))) '(1 2))
(assert equal? (let ((v (make-vector 5)))
                 (for-each (lambda (i)
                             (set v i (* i i)))
                           '(0 1 2 3 4))
                 v) [0 1 4 9 16])

;(assert equal? (call-with-current-continuation
;                  (lambda (exit)
;                    (for-each (lambda (x)
;                                (if (negative? x)
;                                  (exit x)))
;                              '(54 0 37 -3 245 19))
;                    #t)) -3)
;(define list-length
;  (lambda (obj)
;    (call-with-current-continuation
;      (lambda (return)
;        (letrec ((r
;                   (lambda (obj)
;                     (cond ((null? obj) 0)
;                           ((pair? obj)
;                            (+ (r (cdr obj)) 1))
;                           (else (return #f))))))
;          (r obj))))))
;(assert equal? (list-length '(1 2 3 4)) 4)
;(assert equal? (list-length '(a b . c)) #f)
;(assert (equal? (call-with-values (lambda () (values 4 5))
;                                  (lambda (a b) b)) 5))

;(assert equal? (call-with-values * -) -1)
;(assert (equal? (let ((path '())
;                      (c #f))
;                  (let ((add (lambda (s)
;                               (set! path (cons s path)))))
;                    (dynamic-wind
;                      (lambda () (add 'connect))
;                      (lambda ()
;                        (add (call-with-current-continuation
;                               (lambda (c0)
;                                 (set! c c0)
;                                 'talk1))))
;                      (lambda () (add 'disconnect)))
;                    (if (< (length path) 4)
;                      (c 'talk2)
;                      (reverse path)))) (connect talk1 disconnect connect talk2 disconnect)))
;(assert equal? (eval '(* 7 3) (scheme-report-environment 5)) 21)
;(assert (equal? (let ((f (eval '(lambda (f x) (f x x))
;                               (null-environment 5))))
;                  (f + 10)) 20))

(let ()
  (import (li defmacro))
  (defmacro (import-test name)
    `(begin (display ',name)
            (display "...")
            (import ,name)
            (print "passed")))
  (import-test test-bind)
  (import-test test-bytevector)
  (import-test test-class)
  (import-test test-lazy)
  (import-test test-list)
  (import-test test-match)
  (import-test test-record-type)
  ; (import-test test-sock)
  (import-test test-sort)
  (import-test test-split)
  (import-test test-stack)
  (import-test test-string)
  (import-test test-syntax)
  (import-test test-syntax-case)
  (import-test test-vector))

(print "all tests passed!")
(print (timer) "seconds")
