(let ()
  (import (scheme lazy))

  (assert = (force (delay (+ 1 2))) 3)
  (assert equal?
          (let ((p (delay (+ 1 2))))
            (list (force p) (force p)))
          '(3 3))
  (define a-stream
    (letrec ((next
               (lambda (n)
                 (delay (cons n (next (+ n 1)))))))
      (next 0)))
  (define head
    (lambda (stream) (car (force stream))))
  (define tail
    (lambda (stream) (cdr (force stream))))
  (assert = (head (tail (tail a-stream))) 2)

  ;   (define (stream-filter? p? s)
  ;     (delay-force
  ;       (if (null? (force s))
  ;         (delay '())
  ;         (let ((h (car (force s)))
  ;               (t (cdr (force s))))
  ;           (if (p? h)
  ;             (delay (cons h (stream-filter? p? t)))
  ;             (stream-filter? p? t))))))

  ; (print (head (tail (tail (stream-filter? odd? a-stream)))))

  (define count 0)
  (define p
    (delay (begin (set! count (+ count 1))
                  (if (> count x)
                    count
                    (force p)))))
  (define x 5)
  (assert promise? p)
  (assert equal? (force p) 6)
  (assert promise? p)
  (assert equal? (begin (set! x 10) (force p)) 6)
  (assert equal? (eqv? (delay 1) 1) #f)
  (assert equal? (pair? (delay (cons 1 2))) #f)
  ;(assert equal? (+ (delay (* 3 7)) 13) 34)
  ;(assert equal? (+ (delay (* 3 7)) 13) 34)
  ;(assert equal? (+ (delay (* 3 7)) 13) 34)
  '())
