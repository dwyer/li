(let ()

  (assert bytevector? { 0 10 5 })
  (assert equal? (make-bytevector 2 12) { 12 12 })
  (assert equal? (bytevector 1 3 5 1 3 5) { 1 3 5 1 3 5 })
  (assert equal? (bytevector) {})
  (assert = (bytevector-length { 0 10 5 }) 3)
  (assert = (bytevector-u8-ref '{ 1 1 2 3 5 8 13 21 } 5))
  (assert equal? (let ((bv (bytevector 1 2 3 4)))
                  (bytevector-u8-set! bv 1 3)
                  bv) { 1 3 3 4 })
  (define a { 1 2 3 4 5 })
  (assert equal? (bytevector-copy a 2 4) { 3 4 })

  (define a (bytevector 1 2 3 4 5))
  (define b (bytevector 10 20 30 40 50))
  (bytevector-copy! b 1 a 0 2)
  (assert equal? b { 10 1 2 40 50 })

  (assert equal? (bytevector-append { 0 1 2 } { 3 4 5 }) { 0 1 2 3 4 5 })

  (assert equal? (utf8->string { 65 }) "A")
  (assert equal? (string->utf8 "Î»") { 206 187 })

  (assert #t))
