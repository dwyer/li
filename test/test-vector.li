(let ()
  (assert equal? '[0 (2 2 2 2) "Anna"] [0 (2 2 2 2) "Anna"])

  (assert equal? (vector 'a 'b 'c) [a b c])

  (assert equal? (vector-ref '[1 1 2 3 5 8 13 21] 5) 8)
  (assert equal? (vector-ref '[1 1 2 3 5 8 13 21]
                             (let ((i (round (* 2 (acos -1)))))
                               (if (inexact? i)
                                 (exact i)
                                 i))) 13)
  (assert equal? (let ((vec (vector 0 '(2 2 2 2) "Anna")))
                   (vector-set! vec 1 '("Sue" "Sue"))
                   vec) [0 ("Sue" "Sue") "Anna"])
  ;(assert equal? (vector-set! '[0 1 2] 1 "doe") error) ; constant vector

  (assert equal? (vector->list '[dah dah didah]) '(dah dah didah))
  (assert equal? (vector->list '[dah dah didah] 1 2) '(dah))
  (assert equal? (list->vector '(dididit dah)) [dididit dah])

  (assert equal? (string->vector "ABC") [#\A #\B #\C])
  (assert equal? (vector->string [#\1 #\2 #\3]) "123")

  (define a [1 8 2 8]) ; a may be immutable
  (define b (vector-copy a))
  (vector-set! b 0 3) ; b is mutable
  (assert equal? b [3 8 2 8])
  (define c (vector-copy b 1 3))
  (assert equal? c [8 2])

  (define a (vector 1 2 3 4 5))
  (define b (vector 10 20 30 40 50))
  (vector-copy! b 1 a 0 2)
  (assert equal? b [10 1 2 40 50])

  (assert equal? (vector-append [a b c] [d e f]) [a b c d e f])

  (define a (vector 1 2 3 4 5))
  (vector-fill! a 'smash 2 4)
  (assert equal? a [1 2 smash smash 5])
  )
