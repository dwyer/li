(let ()
  (import (li set))
  (import (li misc))
  (import (li gensym))
  (import syntax)

  (define sc1 (scope))
  (define sc2 (scope))

  (assert equal? (syntax 'x (set)) (syntax 'x (set)))
  (assert (syntax? (syntax 'x (set))))
  (assert not (syntax? 'x))

  (assert equal? (datum->syntax 'a) (syntax 'a (set)))
  (assert = (datum->syntax 1) 1)
  (assert equal?
          (datum->syntax '(a b c))
          (list (syntax 'a (set))
                (syntax 'b (set))
                (syntax 'c (set))))
  (assert equal?
         (datum->syntax (list 'a (syntax 'b (set sc1)) 'c))
         (list (syntax 'a (set))
               (syntax 'b (set sc1))
               (syntax 'c (set))))

  (assert eq? sc1 sc1)

  (assert equal?
          (add-scope (syntax 'x (set)) sc1)
          (syntax 'x (set sc1)))
  (assert equal?
          (add-scope (datum->syntax '(x (y))) sc1)
          (list (syntax 'x (set sc1)) (list (syntax 'y (set sc1)))))
  (assert equal?
          (add-scope (syntax 'x (set sc1)) sc1)
          (syntax 'x (set sc1)))
  (assert equal?
          (flip-scope (syntax 'x (set sc1)) sc2)
          (syntax 'x (set sc1 sc2)))
  (assert equal?
          (flip-scope (syntax 'x (set sc1 sc2)) sc2)
          (syntax 'x (set sc1)))

  (define loc/a (gensym))

  (add-binding! (syntax 'a (set sc1)) loc/a)

  (define loc/b-out (gensym))
  (define loc/b-in (gensym))

  (add-binding! (syntax 'b (set sc1)) loc/b-out)
  (add-binding! (syntax 'b (set sc1 sc2)) loc/b-in)

  (define loc/c1 (gensym))
  (define loc/c2 (gensym))

  (add-binding! (syntax 'c (set sc1)) loc/c1)
  (add-binding! (syntax 'c (set sc2)) loc/c2)

  (assert equal?
          (list (syntax 'a (set sc1)))
          (list->set (find-all-matching-bindings (syntax 'a (set sc1)))))

  (assert equal?
          '()
          (list->set (find-all-matching-bindings (syntax 'a (set sc2)))))

  (assert equal?
         (list->set (find-all-matching-bindings (syntax 'a (set sc1 sc2))))
         (list (syntax 'a (set sc1))))

  (assert set-equal?
          (list->set (find-all-matching-bindings (syntax 'b (set sc1 sc2))))
          (set (syntax 'b (set sc1))
               (syntax 'b (set sc1 sc2))))

  (assert set-equal?
          (list->set (find-all-matching-bindings (syntax 'c (set sc1 sc2))))
          (set (syntax 'c (set sc1))
               (syntax 'c (set sc2))))

  (check-unambiguous
    (syntax 'b (set sc1 sc2))
    (list (syntax 'b (set sc1))
          (syntax 'b (set sc1 sc2))))

  ; (check-unambiguous
  ;   (syntax 'c (set sc2))
  ;   (list (syntax 'c (set sc1))
  ;         (syntax 'c (set sc2))))

  (assert not (resolve (datum->syntax 'lambda)))
  (assert eq?
          (resolve (add-scope (datum->syntax 'lambda) core-scope))
          'lambda)
  (assert eq?
          (resolve (add-scope (datum->syntax 'cons) core-scope))
          'cons)

  (assert equal?
          (introduce (datum->syntax 'cons))
          (syntax 'cons (set core-scope)))

  (define one-prog
    (introduce
      (datum->syntax
        '(let-syntax ((one (lambda (stx)
                             (quote-syntax '1))))
           (one)))))

  (assert equal?
          one-prog
          `(,(syntax 'let-syntax (set core-scope))
             ((,(syntax 'one (set core-scope))
                (,(syntax 'lambda (set core-scope))
                  (,(syntax 'stx (set core-scope)))
                  (,(syntax 'quote-syntax (set core-scope))
                    (,(syntax 'quote (set core-scope)) 1)))))
             (,(syntax 'one (set core-scope)))))

  (assert equal?
          (syntax->datum one-prog)
         '(let-syntax ((one (lambda (stx)
                              (quote-syntax '1))))
            (one)))

  (assert equal?
          (expand
            (introduce
              (datum->syntax '(list '1 '2))))
          (list
            (syntax 'list (set core-scope))
            (list (syntax 'quote (set core-scope)) 1)
            (list (syntax 'quote (set core-scope)) 2)))

  ; (print (expand one-prog))
  (assert equal? (syntax->datum (expand one-prog)) ''1)

  ; (print (expand (introduce (datum->syntax '(lambda (x) x)))))
  (assert equal?
          (syntax->datum (expand (introduce (datum->syntax '(lambda (x) x)))))
          '(lambda (x) x))

  (assert not (env-lookup empty-env loc/a))
  (assert eq?
          (env-lookup (env-extend empty-env loc/a variable)
                      loc/a)
          variable)

  (let ((transformer (lambda (x) x)))
    (assert equal?
      (env-lookup (env-extend empty-env loc/a transformer)
                  loc/a)
      transformer)))
