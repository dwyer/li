(let ()
  (let ()
    (import (li defmacro))
    (defmacro (test a b)
      `(assert (equal? ,a ,b)))
    (test (string-split "abc" "/") '("abc"))
    (test (string-split "abc/def" "/") '("abc" "def"))
    (test (string-split "abc/def/ghi" "/") '("abc" "def" "ghi"))
    (test (string-split "abc/def/ghi" "/" 1) '("abc" "def/ghi"))
    (test (string-split "/abc" "/") '("" "abc"))
    (test (string-split "abc/" "/") '("abc" ""))
    (test (string-split "abc" "//") '("abc"))
    (test (string-split "abc//def" "//") '("abc" "def"))
    (test (string-split "abc//def//ghi" "//") '("abc" "def" "ghi"))
    (test (string-split "abc//def//ghi" "//" 1) '("abc" "def//ghi"))
    (test (string-split "//abc" "//") '("" "abc"))
    (test (string-split "abc//" "//") '("abc" ""))
    (test (string-split "abc" "/") '("abc"))
    (test (string-split "abc//def" "/") '("abc" "" "def"))
    (test (string-split "abc//def//ghi" "/") '("abc" "" "def" "" "ghi"))
    (test (string-split "abc//def//ghi" "/" 1) '("abc" "/def//ghi"))
    (test (string-split "//abc" "/") '("" "" "abc"))
    (test (string-split "abc//" "/") '("abc" "" "")))
  )
