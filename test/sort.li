(define (split lst)
  (let loop ((lst lst) (a null) (b null))
    (if (null? lst)
      (cons a b)
      (loop (cdr lst)
            (cons (car lst) b)
            a))))

(define (merge lst1 lst2 . args)
  (case (length args)
    ((0) (merge lst1 lst2 <=))
    ((1) (let ((le (car args)))
           (let loop ((lst1 lst1)
                      (lst2 lst2))
             (cond ((null? lst1) lst2)
                   ((null? lst2) lst1)
                   ((le (car lst1)
                        (car lst2))
                    (cons (car lst1)
                          (loop (cdr lst1)
                                lst2)))
                   (else (cons (car lst2)
                               (loop lst1
                                     (cdr lst2))))))))
    (else (error 'merge "too many arguments" args))))

(define (mergesort lst . args)
  (case (length args)
    ((0) (mergesort lst <=))
    ((1) (let ((le (car args)))
           (let loop ((lst lst))
             (if (or (null? lst) (null? (cdr lst)))
               lst
               (let ((lsts (split lst)))
                 (merge (loop (car lsts))
                        (loop (cdr lsts))
                        le))))))
    (else (error 'merge "too many arguments" args))))

(define (sorted? lst . args)
  (case (length args)
    ((0) (sorted? lst <=))
    ((1) (let ((le (car args)))
           (let loop ((lst lst))
             (if (or (null? lst)
                     (null? (cdr lst)))
               true
               (and (le (car lst) (cadr lst))
                    (loop (cdr lst)))))))
    (else (error 'merge "too many arguments" args))))
