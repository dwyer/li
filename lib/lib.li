(define (check condition who msg . args)
  (if (not condition)
    (apply error who msg args)))

(define (randint start end)
  (+ start (modulo (rand) (- end start -1))))

; STRINGS

(define (string-copy str)
  (substring str 0 (string-length str)))

(define (string-reverse str)
  (list->string (reverse (string->list str))))

(define (substring str start end)
  (let* ((len (- end start))
         (sub (make-string len)))
    (let iter ((k 0))
      (cond ((< k len)
             (string-set! sub k (string-ref str (+ start k)))
             (iter (+ k 1)))
            (else sub)))))
