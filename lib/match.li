(let ()
  (import defmacro)
  (import list)

  (define *bind*
    (let ()

      (define (bind-split expr patt env)
        (let ((n (length patt)))
          (cond ((null? expr) (append (map list patt) env))
                ((every (lambda (expr)
                          (and (list expr) (= (length expr) n)))
                        expr)
                 (let iter ((expr expr) (patt patt))
                   (if (null? patt)
                     env
                     (cons (cons (car patt) (map car expr))
                           (iter (map cdr expr) (cdr patt))))))
                (else false))))

      (define (bind-ellipses expr patt env)
        (let iter ((newexpr expr) (n 0))
          (let ((newenv (bind-iter newexpr (cddr patt) env)))
            (cond (newenv ((if (pair? (car patt))
                             bind-split
                             bind-iter)
                           (take expr n) (car patt) newenv))
                  ((null? newexpr) false)
                  (else (iter (cdr newexpr) (+ n 1)))))))

      (define (bind-iter expr patt env)
        (cond ((null? patt) (and (null? expr) env))
              ((symbol? patt) (cons (cons patt expr) env))
              ((and (not (null? (cdr patt)))
                    (eq? (cadr patt) '...))
               (bind-ellipses expr patt env))
              ((null? expr) false)
              (else
                (let ((env (bind-iter (cdr expr) (cdr patt) env)))
                  (and env (bind-iter (car expr) (car patt) env))))))

      (lambda (expr patt) (bind-iter expr patt null))))

  (define (*expand* body bindings)
    (cond ((symbol? body)
           (let ((pair (assq body bindings)))
             (if pair
               (cdr pair)
               body)))
          ((pair? body)
           (if (and (not (null? (cdr body))) (eq? (cadr body) '...))
             (append (*expand* (car body) bindings)
                     (*expand* (cddr body) bindings))
             (cons (*expand* (car body) bindings)
                   (*expand* (cdr body) bindings))))
          (else body)))

  (define (*match* expr clauses)
    (let iter ((clauses clauses))
      (if (null? clauses)
        (error 'match "expression doesn't match clauses" expr clauses)
        (let* ((clause (car clauses))
               (pattern (car clause))
               (body (cadr clause))
               (bindings (*bind* expr pattern)))
          (if bindings
            (*expand* body bindings)
            (iter (cdr clauses)))))))

  (defmacro (match expr . clauses)
    (*match* expr clauses))

  (export match *bind* *match*))
