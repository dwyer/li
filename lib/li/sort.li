; based on https://srfi.schemers.org/srfi-132/srfi-132.html

(let ()
  (import (li base/values))

  (define (list-sorted? < lis)
    (let loop ((lis lis))
      (if (or (null? lis) (null? (cdr lis)))
        #t
        (and (< (car lis) (cadr lis))
             (loop (cdr lis))))))

  (define vector-sorted?
    (case-lambda
      ((< v) (vector-sorted? 0 (length v)))
      ((< v start) (vector-sorted? start (length v)))
      ((< v start end)
       (let lp ((i start))
         (if (= i (- end 1))
           #t
           (and (< (ref v i) (ref v (+ i 1)))
                (lp (+ i 1))))))))

  (define (*split* lst)
    (let loop ((lst lst)
               (a null)
               (b null))
      (if (null? lst)
        (values a b)
        (loop (cdr lst)
              (cons (car lst) b)
              a))))

  (define (list-sort < lis)
    (if (or (null? lis) (null? (cdr lis)))
      lis
      (let-values (((a b) (*split* lis)))
                  (list-merge < (list-sort < a) (list-sort < b)))))

  ; (define (list-sort < lis)
  ;   (vector->list (vector-sort! < (list->vector lis))))

  (define (*vector-sort!* tmp < v start end)
    (if (<= (- end start) 1)
      v
      (let ((mid (// (+ start end) 2)))
        (vector-merge! < tmp
                       (*vector-sort!* tmp < v start mid)
                       (*vector-sort!* tmp < v mid end)
                       start start mid mid end))))

  (define vector-sort!
    (case-lambda
      ((< v)
       (vector-sort! < v 0 (length v)))
      ((< v start)
       (vector-sort! < v start (length v)))
      ((< v start end)
       (if (<= (- end start) 1)
         v
         (let* ((n (- end start))
                (tmp (make-vector n)))
           (*vector-sort!* tmp < v start end)
           (let lp ((i 0))
             (if (= i n)
               v
               (begin
                 (set v (+ start i) (ref tmp i))
                 (lp (+ i 1))))))))))

  (define (list-merge < lst1 lst2)
    (cond ((null? lst1) lst2)
          ((null? lst2) lst1)
          ((< (car lst2) (car lst1))
           (cons (car lst2) (list-merge < lst1 (cdr lst2))))
          (else
            (cons (car lst1) (list-merge < (cdr lst1) lst2)))))

  (define vector-merge!
    (case-lambda
      ((< to from1 from2)
       (vector-merge! to from1 from2 0 0 (length from1) 0 (length from2)))
      ((< to from1 from2 start)
       (vector-merge! to from1 from2 start 0 (length from1) 0 (length from2)))
      ((< to from1 from2 start start1)
       (vector-merge! to from1 from2 start start1 (length from1) 0 (length from2)))
      ((< to from1 from2 start start1 end1)
       (vector-merge! to from1 from2 start start1 end1 0 (length from2)))
      ((< to from1 from2 start start1 end1 start2)
       (vector-merge! to from1 from2 start start1 end1 start2 (length from2)))
      ((< to from1 from2 start start1 end1 start2 end2)
       (cond 
         ((and (>= start1 end1) (>= start2 end2))
          to)
         ((>= start2 end2)
          (set to start (ref from1 start1))
          (vector-merge! < to from1 from2 (+ start 1) (+ start1 1) end1 start2 end2))
         ((>= start1 end1)
          (set to start (ref from2 start2))
          (vector-merge! < to from1 from2 (+ start 1) start1 end1 (+ start2 1) end2))
         ((< (ref from1 start1) (ref from2 start2))
          (set to start (ref from1 start1))
          (vector-merge! < to from1 from2 (+ start 1) (+ start1 1) end1 start2 end2))
         ((< (ref from2 start2) (ref from1 start1))
          (set to start (ref from2 start2))
          (vector-merge! < to from1 from2 (+ start 1) start1 end1 (+ start2 1) end2))
         (else (error "not possible"))))))

  (define vector-find-median
    (case-lambda
      ((< v knil) (vector-find-median < v knil (lambda (a b) (/ (+ (a b) 2)))))
      ((< v knil mean)
       (let ((n (length v)))
         (cond ((zero? v) knil)
               ((odd? v) (ref v (// n 2)))
               (else (mean (ref v (- (/ n 2) 1))
                           (ref v (/ n 2)))))))))

  (export list-sorted?
          vector-sorted?
          list-sort
          vector-sort!
          list-merge
          vector-merge!))
