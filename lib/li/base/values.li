(let ()
  (import (li defmacro))

  (define (values x . xs)
    (if (null? xs)
      x
      (list->vector `(values ,x ,@xs))))

  (defmacro (let-values bindings . body)
    (car `,(map (lambda (binding)
                  (apply (lambda (formals init)
                           `(let ((init ,init))
                              ,(append `(let ,(let loop ((formals formals)
                                                         (count 1))
                                                (if (null? formals)
                                                  null
                                                  (cons `(,(car formals)
                                                           (ref init ,count))
                                                        (loop (cdr formals)
                                                              (+ count 1))))))
                                       body)))
                         binding))
                bindings)))
  (export values let-values))
