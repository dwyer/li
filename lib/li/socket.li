; https://srfi.schemers.org/srfi-106/srfi-106.html

(let ()

  (include-shared "socket")

  (define *socket-send* socket-send)

  (set! socket-send
    (lambda (sock x . xs*)
      (apply *socket-send* `(,sock ,(if (string? x)
                                      (string->utf8 x)
                                      x)
                                   . ,xs*))))

  (define %address-family `((inet    ,*af-inet*)
                            (inet6   ,*af-inet6*)
                            (unspec  ,*af-unspec*)))

  (define %address-info `((canoname     ,*ai-canonname*)
                          (numerichost  ,*ai-numerichost*)
                          (v4mapped     ,*ai-v4mapped*)
                          (all          ,*ai-all*)
                          (addrconfig   ,*ai-addrconfig*)))

  (define %ip-protocol `((ip  ,*ipproto-ip*)
                         (tcp ,*ipproto-tcp*)
                         (udp ,*ipproto-udp*)))

  (define %socket-domain `((stream   ,*sock-stream*)
                           (datagram ,*sock-dgram*)))

  (define %message-types `((none 0)
                           (peek ,*msg-peek*)
                           (oob  ,*msg-oob*)
                           (wait-all ,*msg-waitall*)))

  (define (lookup who sets name)
    (cond ((assq name sets) => cadr)
          (else (error who "no name defined" name))))

  (define ((proc-trans f) x)
    (apply f (cdr x)))

  (define (%lookup-transformer tag lst)
    (proc-trans
      (lambda (name)
        (lookup tag lst name))))

  (define-syntax address-family
    (%lookup-transformer 'address-family %address-family))

  (define-syntax address-info
    (proc-trans
      (lambda names
        (apply socket-merge-flags
               (map (lambda (name) (lookup 'address-info %address-info name))
                    names)))))

  (define-syntax socket-domain
    (%lookup-transformer 'socket-domain %socket-domain))

  (define-syntax ip-protocol
    (%lookup-transformer 'ip-protocol %ip-protocol))

  (define-syntax message-type
    (proc-trans
      (lambda names
        (apply socket-merge-flags
               (map (lambda (name) (lookup 'message-type %message-types name))
                    names)))))

  (define (%proper-method methods)
    (define allowed-methods '(read write))
    (define (check-methods methods)
      (let loop ((methods methods) (seen '()))
        (cond ((null? methods))
              ((memq (car methods) allowed-methods)
               => (lambda (m)
                    (if (memq (car m) seen)
                      (error 'shutdown-method
                             "duplicate method" m)
                      (loop (cdr methods) (cons (car m) seen)))))
              (else (error 'shutdown-method
                           "unknown method" (car methods))))))
    (check-methods methods)
    (if (null? (cdr methods))
      (case (car methods)
        ((read) *shut-rd*)
        ((write) *shut-wr*))
      *shut-rdwr*))

  (define-syntax shutdown-method
    (proc-trans
      (lambda methods
        (%proper-method methods))))

  (define (call-with-socket socket proc)
    (let ((res (proc socket)))
      (socket-close socket)
      res))

  (define (%socket-port socket)
    (define (read! bv start count)
      (let ((r (socket-recv socket count)))
        (bytevector-copy! r 0 bv start (bytevector-length r))
        (bytevector-length r)))
    (define (write! bv start count)
      (let ((buf (make-bytevector count)))
        (bytevector-copy! bv start buf 0 count)
        (socket-send socket buf)))
    (make-custom-binary-input/output-port
      "socket-port" read! write! #f #f #f))

  (define socket-input-port %socket-port)
  (define socket-output-port %socket-port)

  (export make-client-socket
          make-server-socket
          socket?
          socket-accept
          socket-send
          socket-recv
          socket-shutdown shutdown-method
          socket-close
          socket-input-port
          socket-output-port
          call-with-socket))
